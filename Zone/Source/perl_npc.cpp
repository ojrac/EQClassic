/*
 * This file was generated automatically by xsubpp version 1.9508 from the
 * contents of tmp. Do not edit this file, edit tmp instead.
 *
 *		ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#include "features.h"
#ifdef EMBPERL
#include "Logger.h"
#include "embperl.h"

typedef const char Const_char;

#include "npc.h"

#ifdef THIS	 /* this macro seems to leak out on some systems */
#undef THIS		
#endif



XS(XS_NPC_SignalNPC); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_SignalNPC)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: NPC::SignalNPC(THIS, _signal_id)");
	{
		NPC *		THIS;
		int		_signal_id = (int)SvIV(ST(1));

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SignalNPC(_signal_id);
	}
	XSRETURN_EMPTY;
}


XS(XS_NPC_AddItem); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_AddItem)
{
	dXSARGS;
	if (items < 3 || items > 4)
		Perl_croak(aTHX_ "Usage: NPC::AddItem(THIS, itemid, charges, slot= 0)");
	{
		NPC *		THIS;
		int32		itemid = (int32)SvUV(ST(1));
		int8		charges = (int8)SvUV(ST(2));
		int8		slot;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 4)
			slot = 0;
		else {
			slot = (int8)SvUV(ST(3));
		}

		THIS->AddItem(itemid, charges, slot);
	}
	XSRETURN_EMPTY;
}


XS(XS_NPC_AddLootTable); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_AddLootTable)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::AddLootTable(THIS)");
	{
		NPC *		THIS;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->AddLootTable();
	}
	XSRETURN_EMPTY;
}


XS(XS_NPC_ClearItemList); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_ClearItemList)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::ClearItemList(THIS)");
	{
		NPC *		THIS;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->ClearItemList();
	}
	XSRETURN_EMPTY;
}


XS(XS_NPC_AddCash); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_AddCash)
{
	dXSARGS;
	if (items != 5)
		Perl_croak(aTHX_ "Usage: NPC::AddCash(THIS, in_copper, in_silver, in_gold, in_platinum)");
	{
		NPC *		THIS;
		int16		in_copper = (int16)SvUV(ST(1));
		int16		in_silver = (int16)SvUV(ST(2));
		int16		in_gold = (int16)SvUV(ST(3));
		int16		in_platinum = (int16)SvUV(ST(4));

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->AddCash(in_copper, in_silver, in_gold, in_platinum);
	}
	XSRETURN_EMPTY;
}


XS(XS_NPC_RemoveCash); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_RemoveCash)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::RemoveCash(THIS)");
	{
		NPC *		THIS;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->RemoveCash();
	}
	XSRETURN_EMPTY;
}


XS(XS_NPC_CountLoot); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_CountLoot)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::CountLoot(THIS)");
	{
		NPC *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CountLoot();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_NPC_GetLoottableID); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_GetLoottableID)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::GetLoottableID(THIS)");
	{
		NPC *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetLoottableID();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_NPC_GetCopper); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_GetCopper)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::GetCopper(THIS)");
	{
		NPC *		THIS;
		uint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCopper();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_NPC_GetSilver); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_GetSilver)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::GetSilver(THIS)");
	{
		NPC *		THIS;
		uint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSilver();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_NPC_GetGold); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_GetGold)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::GetGold(THIS)");
	{
		NPC *		THIS;
		uint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetGold();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_NPC_GetPlatinum); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_GetPlatinum)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: NPC::GetPlatinum(THIS)");
	{
		NPC *		THIS;
		uint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetPlatinum();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_NPC_GetNPCHate); /* prototype to pass -Wmissing-prototypes */
XS(XS_NPC_GetNPCHate)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: NPC::GetNPCHate(THIS, in_ent)");
	{
		NPC *		THIS;
		sint32		RETVAL;
		dXSTARG;
		Mob*		in_ent;

		if (sv_derived_from(ST(0), "NPC")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(NPC *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type NPC");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			in_ent = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "in_ent is not of type Mob");
		if(in_ent == NULL)
			Perl_croak(aTHX_ "in_ent is NULL, avoiding crash.");

		RETVAL = THIS->GetNPCHate(in_ent);
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}

#ifdef __cplusplus
extern "C"
#endif
XS(boot_NPC); /* prototype to pass -Wmissing-prototypes */
XS(boot_NPC)
{
	dXSARGS;
	char file[256];
	strncpy(file, __FILE__, 256);
	file[255] = 0;
	
	if(items != 1)
		fprintf(stderr, "boot_quest does not take any arguments.");
	char buf[128];

	//add the strcpy stuff to get rid of const warnings....



	XS_VERSION_BOOTCHECK ;

		newXSproto(strcpy(buf, "SignalNPC"), XS_NPC_SignalNPC, file, "$$");
		newXSproto(strcpy(buf, "AddItem"), XS_NPC_AddItem, file, "$$$;$");
		newXSproto(strcpy(buf, "AddLootTable"), XS_NPC_AddLootTable, file, "$");
		newXSproto(strcpy(buf, "ClearItemList"), XS_NPC_ClearItemList, file, "$");
		newXSproto(strcpy(buf, "AddCash"), XS_NPC_AddCash, file, "$$$$$");
		newXSproto(strcpy(buf, "RemoveCash"), XS_NPC_RemoveCash, file, "$");
		newXSproto(strcpy(buf, "CountLoot"), XS_NPC_CountLoot, file, "$");
		newXSproto(strcpy(buf, "GetLoottableID"), XS_NPC_GetLoottableID, file, "$");
		newXSproto(strcpy(buf, "GetCopper"), XS_NPC_GetCopper, file, "$");
		newXSproto(strcpy(buf, "GetSilver"), XS_NPC_GetSilver, file, "$");
		newXSproto(strcpy(buf, "GetGold"), XS_NPC_GetGold, file, "$");
		newXSproto(strcpy(buf, "GetPlatinum"), XS_NPC_GetPlatinum, file, "$");
		newXSproto(strcpy(buf, "GetNPCHate"), XS_NPC_GetNPCHate, file, "$$");
	XSRETURN_YES;
}

#endif //EMBPERL_XS_CLASSES

