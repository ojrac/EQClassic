/*
 * This file was generated automatically by xsubpp version 1.9508 from the
 * contents of tmp. Do not edit this file, edit tmp instead.
 *
 *		ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#include "features.h"
#ifdef EMBPERL
#include "Logger.h"
#include "embperl.h"

typedef const char Const_char;

#include "mob.h"

#ifdef THIS	 /* this macro seems to leak out on some systems */
#undef THIS		
#endif



XS(XS_Mob_IsMob); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsMob)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsMob(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsMob();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_VisibleToMob); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_VisibleToMob)
{
	dXSARGS;
	if (items < 1 || items > 2)
		Perl_croak(aTHX_ "Usage: Mob::VisibleToMob(THIS, other= 0)");
	{
		Mob *		THIS;
		bool		RETVAL;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 2)
			other = 0;
		else {
			if (sv_derived_from(ST(1), "Mob")) {
				IV tmp = SvIV((SV*)SvRV(ST(1)));
				other = INT2PTR(Mob *,tmp);
			}
			else
				Perl_croak(aTHX_ "other is not of type Mob");
			if(other == NULL)
				Perl_croak(aTHX_ "other is NULL, avoiding crash.");
		}

		RETVAL = THIS->VisibleToMob(other);
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_IsFullHP); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsFullHP)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsFullHP(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsFullHP();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_IsSnared); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsSnared)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsSnared(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsSnared();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_IsRooted); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsRooted)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsRooted(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsRooted();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_IsAlive); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsAlive)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsAlive(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsAlive();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSkill); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSkill)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::GetSkill(THIS, skill_num)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;
		int		skill_num = (int)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSkill(skill_num);
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetEquipment); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetEquipment)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::GetEquipment(THIS, item_num)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;
		int		item_num = (int)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetEquipment(item_num);
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetRace); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetRace)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetRace(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetRace();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetGender); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetGender)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetGender(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetGender();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetBaseRace); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetBaseRace)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetBaseRace(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetBaseRace();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetBaseGender); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetBaseGender)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetBaseGender(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetBaseGender();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetDeity); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetDeity)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetDeity(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetDeity();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetTexture); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetTexture)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetTexture(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetTexture();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetHelmTexture); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetHelmTexture)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetHelmTexture(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetHelmTexture();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetClass); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetClass)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetClass(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetClass();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetLevel); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetLevel)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetLevel(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetLevel();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetName); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetName)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetName(THIS)");
	{
		Mob *		THIS;
		char *		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetName();
		sv_setpv(TARG, RETVAL); XSprePUSH; PUSHTARG;
	}
	XSRETURN(1);
}


XS(XS_Mob_GetTarget); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetTarget)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetTarget(THIS)");
	{
		Mob *		THIS;
		Mob *		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetTarget();
		ST(0) = sv_newmortal();
		sv_setref_pv(ST(0), "Mob", (void*)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetHPRatio); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetHPRatio)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetHPRatio(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetHPRatio();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetHP); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetHP)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetHP(THIS)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetHP();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetMaxHP); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetMaxHP)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetMaxHP(THIS)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetMaxHP();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetMaxMana); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetMaxMana)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetMaxMana(THIS)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetMaxMana();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetMana); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetMana)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetMana(THIS)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetMana();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetATK); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetATK)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetATK(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetATK();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSTR); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSTR)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetSTR(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSTR();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSTA); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSTA)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetSTA(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSTA();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetDEX); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetDEX)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetDEX(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetDEX();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetAGI); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetAGI)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetAGI(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetAGI();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetINT); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetINT)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetINT(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetINT();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetWIS); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetWIS)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetWIS(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetWIS();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCHA); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCHA)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCHA(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCHA();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetMR); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetMR)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetMR(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetMR();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCR); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCR)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCR(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCR();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetFR); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetFR)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetFR(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetFR();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetDR); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetDR)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetDR(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetDR();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetPR); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetPR)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetPR(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetPR();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetX); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetX)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetX(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetX();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetY); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetY)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetY(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetY();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetZ)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetZ(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetZ();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetHeading); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetHeading)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetHeading(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetHeading();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSize); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSize)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetSize(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSize();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetLastChange); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetLastChange)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetLastChange(THIS)");
	{
		Mob *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetLastChange();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetAppearance); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetAppearance)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetAppearance(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetAppearance();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetPet); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetPet)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetPet(THIS)");
	{
		Mob *		THIS;
		Mob *		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetPet();
		ST(0) = sv_newmortal();
		sv_setref_pv(ST(0), "Mob", (void*)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetPetID); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetPetID)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetPetID(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetPetID();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetOwnerOrSelf); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetOwnerOrSelf)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetOwnerOrSelf(THIS)");
	{
		Mob *		THIS;
		Mob *		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetOwnerOrSelf();
		ST(0) = sv_newmortal();
		sv_setref_pv(ST(0), "Mob", (void*)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetOwner); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetOwner)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetOwner(THIS)");
	{
		Mob *		THIS;
		Mob *		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetOwner();
		ST(0) = sv_newmortal();
		sv_setref_pv(ST(0), "Mob", (void*)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetOwnerID); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetOwnerID)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetOwnerID(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetOwnerID();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetPetType); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetPetType)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetPetType(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetPetType();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSpecialFactionCon); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSpecialFactionCon)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::GetSpecialFactionCon(THIS, iOther)");
	{
		Mob *		THIS;
		FACTION_VALUE		RETVAL;
		dXSTARG;
		Mob*		iOther;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			iOther = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "iOther is not of type Mob");
		if(iOther == NULL)
			Perl_croak(aTHX_ "iOther is NULL, avoiding crash.");

		RETVAL = THIS->GetSpecialFactionCon(iOther);
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetHitBox); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetHitBox)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetHitBox(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetHitBox();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetGuardX); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetGuardX)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetGuardX(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetGuardX();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetGuardY); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetGuardY)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetGuardY(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetGuardY();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetGuardZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetGuardZ)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetGuardZ(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetGuardZ();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_IsBard); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsBard)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsBard(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsBard();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_IsMesmerized); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsMesmerized)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsMesmerized(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsMesmerized();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCastingSpellTargetID); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCastingSpellTargetID)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCastingSpellTargetID(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCastingSpellTargetID();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCastingSpellSlot); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCastingSpellSlot)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCastingSpellSlot(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCastingSpellSlot();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCastingSpellInventorySlot); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCastingSpellInventorySlot)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCastingSpellInventorySlot(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCastingSpellInventorySlot();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCurfp); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCurfp)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCurfp(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCurfp();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSeeInvisible); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSeeInvisible)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetSeeInvisible(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSeeInvisible();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSeeInvisibleUndead); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSeeInvisibleUndead)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetSeeInvisibleUndead(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSeeInvisibleUndead();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetRunSpeed); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetRunSpeed)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetRunSpeed(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetRunSpeed();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetWalkSpeed); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetWalkSpeed)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetWalkSpeed(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetWalkSpeed();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetNPCTypeID); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetNPCTypeID)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetNPCTypeID(THIS)");
	{
		Mob *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetNPCTypeID();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetDamageShield); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetDamageShield)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetDamageShield(THIS)");
	{
		Mob *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetDamageShield();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetReverseDamageShield); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetReverseDamageShield)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetReverseDamageShield(THIS)");
	{
		Mob *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetReverseDamageShield();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetDamageShieldType); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetDamageShieldType)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetDamageShieldType(THIS)");
	{
		Mob *		THIS;
		int8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetDamageShieldType();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetAnimation); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetAnimation)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetAnimation(THIS)");
	{
		Mob *		THIS;
		sint8		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetAnimation();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetLevelRegen); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetLevelRegen)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetLevelRegen(THIS)");
	{
		Mob *		THIS;
		int32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetLevelRegen();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetHitChance); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetHitChance)
{
	dXSARGS;
	if (items != 4)
		Perl_croak(aTHX_ "Usage: Mob::GetHitChance(THIS, attacker, defender, skill_num)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;
		Mob*		attacker;
		Mob*		defender;
		int		skill_num = (int)SvIV(ST(3));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			attacker = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "attacker is not of type Mob");
		if(attacker == NULL)
			Perl_croak(aTHX_ "attacker is NULL, avoiding crash.");

		if (sv_derived_from(ST(2), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(2)));
			defender = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "defender is not of type Mob");
		if(defender == NULL)
			Perl_croak(aTHX_ "defender is NULL, avoiding crash.");

		RETVAL = THIS->GetHitChance(attacker, defender, skill_num);
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetItemHaste); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetItemHaste)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetItemHaste(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetItemHaste();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetKickDamage); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetKickDamage)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetKickDamage(THIS)");
	{
		Mob *		THIS;
		int		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetKickDamage();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetBashDamage); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetBashDamage)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetBashDamage(THIS)");
	{
		Mob *		THIS;
		int		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetBashDamage();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetMeleeReach); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetMeleeReach)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetMeleeReach(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetMeleeReach();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetBaseSize); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetBaseSize)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetBaseSize(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetBaseSize();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetDefaultSize); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetDefaultSize)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetDefaultSize(THIS)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetDefaultSize();
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_setBoatSpeed); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_setBoatSpeed)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::setBoatSpeed(THIS, speed)");
	{
		Mob *		THIS;
		float		speed = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->setBoatSpeed(speed);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetOwnerID); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetOwnerID)
{
	dXSARGS;
	if (items < 2 || items > 3)
		Perl_croak(aTHX_ "Usage: Mob::SetOwnerID(THIS, NewOwnerID, despawn= true)");
	{
		Mob *		THIS;
		int16		NewOwnerID = (int16)SvUV(ST(1));
		bool		despawn;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 3)
			despawn = true;
		else {
			despawn = (bool)SvTRUE(ST(2));
		}

		THIS->SetOwnerID(NewOwnerID, despawn);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetPet); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetPet)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetPet(THIS, newpet)");
	{
		Mob *		THIS;
		Mob*		newpet;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			newpet = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "newpet is not of type Mob");
		if(newpet == NULL)
			Perl_croak(aTHX_ "newpet is NULL, avoiding crash.");

		THIS->SetPet(newpet);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetPetID); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetPetID)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetPetID(THIS, NewPetID)");
	{
		Mob *		THIS;
		int16		NewPetID = (int16)SvUV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetPetID(NewPetID);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetTarget); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetTarget)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetTarget(THIS, mob)");
	{
		Mob *		THIS;
		Mob*		mob;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			mob = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "mob is not of type Mob");
		if(mob == NULL)
			Perl_croak(aTHX_ "mob is NULL, avoiding crash.");

		THIS->SetTarget(mob);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetCurfp); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetCurfp)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetCurfp(THIS, change)");
	{
		Mob *		THIS;
		bool		change = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetCurfp(change);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_DoManaRegen); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DoManaRegen)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::DoManaRegen(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->DoManaRegen();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_DoEnduRegen); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DoEnduRegen)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::DoEnduRegen(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->DoEnduRegen();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetInvisible); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetInvisible)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetInvisible(THIS, toggle)");
	{
		Mob *		THIS;
		bool		toggle = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetInvisible(toggle);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetInvisibleUndead); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetInvisibleUndead)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetInvisibleUndead(THIS, toggle)");
	{
		Mob *		THIS;
		bool		toggle = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetInvisibleUndead(toggle);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetInvisibleAnimal); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetInvisibleAnimal)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetInvisibleAnimal(THIS, toggle)");
	{
		Mob *		THIS;
		bool		toggle = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetInvisibleAnimal(toggle);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetHP); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetHP)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetHP(THIS, hp)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;
		sint32		hp = (sint32)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->SetHP(hp);
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_SetLevel); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetLevel)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetLevel(THIS, in_level)");
	{
		Mob *		THIS;
		uint8		in_level = (uint8)SvUV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetLevel(in_level);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetMana); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetMana)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetMana(THIS, amount)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;
		sint32		amount = (sint32)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->SetMana(amount);
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_SetSkill); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetSkill)
{
	dXSARGS;
	if (items != 3)
		Perl_croak(aTHX_ "Usage: Mob::SetSkill(THIS, in_skill_num, in_skill_id)");
	{
		Mob *		THIS;
		int		in_skill_num = (int)SvIV(ST(1));
		int8		in_skill_id = (int8)SvUV(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetSkill(in_skill_num, in_skill_id);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_GoToBind); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GoToBind)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GoToBind(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->GoToBind();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Attack); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Attack)
{
	dXSARGS;
	if (items < 2 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::Attack(THIS, other, Hand= 13, procEligible= true, riposte= false)");
	{
		Mob *		THIS;
		Mob*		other;
		int		Hand;
		bool		procEligible;
		bool		riposte;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		if (items < 3)
			Hand = 13;
		else {
			Hand = (int)SvIV(ST(2));
		}

		if (items < 4)
			procEligible = true;
		else {
			procEligible = (bool)SvTRUE(ST(3));
		}

		if (items < 5)
			riposte = false;
		else {
			riposte = (bool)SvTRUE(ST(4));
		}

		THIS->Attack(other, Hand, procEligible, riposte);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Damage); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Damage)
{
	dXSARGS;
	if (items < 4 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::Damage(THIS, from, damage, spell_id, attack_skill= 0x04)");
	{
		Mob *		THIS;
		Mob*		from;
		sint32		damage = (sint32)SvIV(ST(2));
		int16		spell_id = (int16)SvUV(ST(3));
		int8		attack_skill;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			from = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "from is not of type Mob");
		if(from == NULL)
			Perl_croak(aTHX_ "from is NULL, avoiding crash.");

		if (items < 5)
			attack_skill = 0x04;
		else {
			attack_skill = (int8)SvUV(ST(4));
		}

		THIS->Damage(from, damage, spell_id, attack_skill);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Heal); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Heal)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::Heal(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Heal();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Death); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Death)
{
	dXSARGS;
	if (items < 3 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::Death(THIS, killer, damage, spell_id= 0xFFFF, attack_skill= 0x04)");
	{
		Mob *		THIS;
		Mob*		killer;
		sint32		damage = (sint32)SvIV(ST(2));
		int16		spell_id;
		int8		attack_skill;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			killer = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "killer is not of type Mob");
		if(killer == NULL)
			Perl_croak(aTHX_ "killer is NULL, avoiding crash.");

		if (items < 4)
			spell_id = 0xFFFF;
		else {
			spell_id = (int16)SvUV(ST(3));
		}

		if (items < 5)
			attack_skill = 0x04;
		else {
			attack_skill = (int8)SvUV(ST(4));
		}

		THIS->Death(killer, damage, spell_id, attack_skill);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_GMMove); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GMMove)
{
	dXSARGS;
	if (items < 4 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::GMMove(THIS, x, y, z, heading= 0.01)");
	{
		Mob *		THIS;
		float		x = (float)SvNV(ST(1));
		float		y = (float)SvNV(ST(2));
		float		z = (float)SvNV(ST(3));
		float		heading;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 5)
			heading = 0.01;
		else {
			heading = (float)SvNV(ST(4));
		}

		THIS->GMMove(x, y, z, heading);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Message); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Message)
{
	dXSARGS;
	if (items < 3)
		Perl_croak(aTHX_ "Usage: Mob::Message(THIS, Type, pMessage, ...)");
	{
		Mob *		THIS;
		MessageFormat		Type = (MessageFormat)SvUV(ST(1));
		char*		pMessage = (char *)SvPV_nolen(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Message(Type, pMessage);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_TicProcess); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_TicProcess)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::TicProcess(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->TicProcess();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_ChangeHP); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_ChangeHP)
{
	dXSARGS;
	if (items < 3 || items > 4)
		Perl_croak(aTHX_ "Usage: Mob::ChangeHP(THIS, other, amount, spell_id= 0)");
	{
		Mob *		THIS;
		Mob*		other;
		sint32		amount = (sint32)SvIV(ST(2));
		int16		spell_id;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		if (items < 4)
			spell_id = 0;
		else {
			spell_id = (int16)SvUV(ST(3));
		}

		THIS->ChangeHP(other, amount, spell_id);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_MonkSpecialAttack); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_MonkSpecialAttack)
{
	dXSARGS;
	if (items != 3)
		Perl_croak(aTHX_ "Usage: Mob::MonkSpecialAttack(THIS, other, type)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;
		Mob*		other;
		int8		type = (int8)SvUV(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->MonkSpecialAttack(other, type);
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_DoAnim); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DoAnim)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::DoAnim(THIS, animnum)");
	{
		Mob *		THIS;
		int8		animnum = (int8)SvUV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->DoAnim(animnum);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_ChangeSize); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_ChangeSize)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::ChangeSize(THIS, in_size)");
	{
		Mob *		THIS;
		float		in_size = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->ChangeSize(in_size);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SendPosUpdate); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SendPosUpdate)
{
	dXSARGS;
	if (items < 1 || items > 4)
		Perl_croak(aTHX_ "Usage: Mob::SendPosUpdate(THIS, SendToSelf= false, range= -1, CheckLoS= false)");
	{
		Mob *		THIS;
		bool		SendToSelf;
		sint32		range;
		bool		CheckLoS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 2)
			SendToSelf = false;
		else {
			SendToSelf = (bool)SvTRUE(ST(1));
		}

		if (items < 3)
			range = -1;
		else {
			range = (sint32)SvIV(ST(2));
		}

		if (items < 4)
			CheckLoS = false;
		else {
			CheckLoS = (bool)SvTRUE(ST(3));
		}

		THIS->SendPosUpdate(SendToSelf, range, CheckLoS);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SendBeginCastPacket); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SendBeginCastPacket)
{
	dXSARGS;
	if (items != 3)
		Perl_croak(aTHX_ "Usage: Mob::SendBeginCastPacket(THIS, spellid, cast_time)");
	{
		Mob *		THIS;
		int16		spellid = (int16)SvUV(ST(1));
		int32		cast_time = (int32)SvUV(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SendBeginCastPacket(spellid, cast_time);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_DamageShield); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DamageShield)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::DamageShield(THIS, other)");
	{
		Mob *		THIS;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		THIS->DamageShield(other);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SpellProcess); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SpellProcess)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::SpellProcess(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SpellProcess();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_InterruptSpell); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_InterruptSpell)
{
	dXSARGS;
	if (items < 1 || items > 3)
		Perl_croak(aTHX_ "Usage: Mob::InterruptSpell(THIS, fizzle= false, consumeMana= false)");
	{
		Mob *		THIS;
		bool		fizzle;
		bool		consumeMana;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 2)
			fizzle = false;
		else {
			fizzle = (bool)SvTRUE(ST(1));
		}

		if (items < 3)
			consumeMana = false;
		else {
			consumeMana = (bool)SvTRUE(ST(2));
		}

		THIS->InterruptSpell(fizzle, consumeMana);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_BuffFadeBySlot); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_BuffFadeBySlot)
{
	dXSARGS;
	if (items != 3)
		Perl_croak(aTHX_ "Usage: Mob::BuffFadeBySlot(THIS, slot, iRecalcBonuses)");
	{
		Mob *		THIS;
		int		slot = (int)SvIV(ST(1));
		bool		iRecalcBonuses = (bool)SvTRUE(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->BuffFadeBySlot(slot, iRecalcBonuses);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_BuffFadeAll); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_BuffFadeAll)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::BuffFadeAll(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->BuffFadeAll();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Kill); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Kill)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::Kill(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Kill();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SaveGuardSpot); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SaveGuardSpot)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::SaveGuardSpot(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SaveGuardSpot();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_StopSong); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_StopSong)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::StopSong(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->StopSong();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_DoBardSongAnim); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DoBardSongAnim)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::DoBardSongAnim(THIS, spell_id)");
	{
		Mob *		THIS;
		int16		spell_id = (int16)SvUV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->DoBardSongAnim(spell_id);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_EnableSpellBar); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_EnableSpellBar)
{
	dXSARGS;
	if (items < 1 || items > 2)
		Perl_croak(aTHX_ "Usage: Mob::EnableSpellBar(THIS, spell_id= 0)");
	{
		Mob *		THIS;
		int16		spell_id;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 2)
			spell_id = 0;
		else {
			spell_id = (int16)SvUV(ST(1));
		}

		THIS->EnableSpellBar(spell_id);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Mesmerize); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Mesmerize)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::Mesmerize(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Mesmerize();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_CalcBonuses); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CalcBonuses)
{
	dXSARGS;
	if (items < 1 || items > 3)
		Perl_croak(aTHX_ "Usage: Mob::CalcBonuses(THIS, refresHaste= false, refreshItemBonuses= false)");
	{
		Mob *		THIS;
		bool		refresHaste;
		bool		refreshItemBonuses;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 2)
			refresHaste = false;
		else {
			refresHaste = (bool)SvTRUE(ST(1));
		}

		if (items < 3)
			refreshItemBonuses = false;
		else {
			refreshItemBonuses = (bool)SvTRUE(ST(2));
		}

		THIS->CalcBonuses(refresHaste, refreshItemBonuses);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_DoHPRegen); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DoHPRegen)
{
	dXSARGS;
	if (items < 1 || items > 2)
		Perl_croak(aTHX_ "Usage: Mob::DoHPRegen(THIS, expected_new_hp= 0)");
	{
		Mob *		THIS;
		int32		expected_new_hp;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 2)
			expected_new_hp = 0;
		else {
			expected_new_hp = (int32)SvUV(ST(1));
		}

		THIS->DoHPRegen(expected_new_hp);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SendHPUpdate); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SendHPUpdate)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::SendHPUpdate(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SendHPUpdate();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_DoSpecialAttackDamage); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DoSpecialAttackDamage)
{
	dXSARGS;
	if (items < 4 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::DoSpecialAttackDamage(THIS, who, skill, max_damage, min_damage= 0)");
	{
		Mob *		THIS;
		Mob *		who;
		int16		skill = (int16)SvUV(ST(2));
		sint32		max_damage = (sint32)SvIV(ST(3));
		sint32		min_damage;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			who = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "who is not of type Mob");
		if(who == NULL)
			Perl_croak(aTHX_ "who is NULL, avoiding crash.");

		if (items < 5)
			min_damage = 0;
		else {
			min_damage = (sint32)SvIV(ST(4));
		}

		THIS->DoSpecialAttackDamage(who, skill, max_damage, min_damage);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_CheckPet); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CheckPet)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CheckPet(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->CheckPet();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_CheckAggro); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CheckAggro)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::CheckAggro(THIS, other)");
	{
		Mob *		THIS;
		bool		RETVAL;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->CheckAggro(other);
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CheckLosFN); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CheckLosFN)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::CheckLosFN(THIS, other)");
	{
		Mob *		THIS;
		bool		RETVAL;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->CheckLosFN(other);
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CheckMaxSkill); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CheckMaxSkill)
{
	dXSARGS;
	if (items < 5 || items > 6)
		Perl_croak(aTHX_ "Usage: Mob::CheckMaxSkill(THIS, skillid, race, eqclass, level, gmRequest= false)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;
		int		skillid = (int)SvIV(ST(1));
		int8		race = (int8)SvUV(ST(2));
		int8		eqclass = (int8)SvUV(ST(3));
		int8		level = (int8)SvUV(ST(4));
		bool		gmRequest;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 6)
			gmRequest = false;
		else {
			gmRequest = (bool)SvTRUE(ST(5));
		}

		RETVAL = THIS->CheckMaxSkill(skillid, race, eqclass, level, gmRequest);
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_MakePet); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_MakePet)
{
	dXSARGS;
	if (items < 4 || items > 11)
		Perl_croak(aTHX_ "Usage: Mob::MakePet(THIS, in_level, in_class, in_race, in_texture= 0, in_pettype= 0, in_size= 0, type= 0, min_dmg= 0, max_dmg= 0, petmax_hp=0)");
	{
		Mob *		THIS;
		int8		in_level = (int8)SvUV(ST(1));
		int8		in_class = (int8)SvUV(ST(2));
		int16		in_race = (int16)SvUV(ST(3));
		int8		in_texture;
		int8		in_pettype;
		float		in_size;
		int8		type;
		int32		min_dmg;
		int32		max_dmg;
		sint32		petmax_hp;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 5)
			in_texture = 0;
		else {
			in_texture = (int8)SvUV(ST(4));
		}

		if (items < 6)
			in_pettype = 0;
		else {
			in_pettype = (int8)SvUV(ST(5));
		}

		if (items < 7)
			in_size = 0;
		else {
			in_size = (float)SvNV(ST(6));
		}

		if (items < 8)
			type = 0;
		else {
			type = (int8)SvUV(ST(7));
		}

		if (items < 9)
			min_dmg = 0;
		else {
			min_dmg = (int32)SvUV(ST(8));
		}

		if (items < 10)
			max_dmg = 0;
		else {
			max_dmg = (int32)SvUV(ST(9));
		}

		if (items < 11)
			petmax_hp = 0;
		else {
			petmax_hp = (sint32)SvIV(ST(10));
		}

		THIS->MakePet(in_level, in_class, in_race, in_texture, in_pettype, in_size, type, min_dmg, max_dmg, petmax_hp);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_MakeEyeOfZomm); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_MakeEyeOfZomm)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::MakeEyeOfZomm(THIS, caster)");
	{
		Mob *		THIS;
		Mob*		caster;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			caster = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "caster is not of type Mob");
		if(caster == NULL)
			Perl_croak(aTHX_ "caster is NULL, avoiding crash.");

		THIS->MakeEyeOfZomm(caster);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_ShowStats); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_ShowStats)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::ShowStats(THIS, client)");
	{
		Mob *		THIS;
		Client*		client;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Client")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			client = INT2PTR(Client *,tmp);
		}
		else
			Perl_croak(aTHX_ "client is not of type Client");
		if(client == NULL)
			Perl_croak(aTHX_ "client is NULL, avoiding crash.");

		THIS->ShowStats(client);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_ShowBuffs); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_ShowBuffs)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::ShowBuffs(THIS, client)");
	{
		Mob *		THIS;
		Client*		client;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Client")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			client = INT2PTR(Client *,tmp);
		}
		else
			Perl_croak(aTHX_ "client is not of type Client");
		if(client == NULL)
			Perl_croak(aTHX_ "client is NULL, avoiding crash.");

		THIS->ShowBuffs(client);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_FindSpell); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_FindSpell)
{
	dXSARGS;
	if (items < 4 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::FindSpell(THIS, classp, level, type, spelltype= 0)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;
		int16		classp = (int16)SvUV(ST(1));
		int16		level = (int16)SvUV(ST(2));
		int8		type = (int8)SvUV(ST(3));
		int8		spelltype;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 5)
			spelltype = 0;
		else {
			spelltype = (int8)SvUV(ST(4));
		}

		RETVAL = THIS->FindSpell(classp, level, type, spelltype);
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_FindType); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_FindType)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::FindType(THIS, type)");
	{
		Mob *		THIS;
		bool		RETVAL;
		int8		type = (int8)SvUV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->FindType(type);
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_FindGroundZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_FindGroundZ)
{
	dXSARGS;
	if (items < 3 || items > 4)
		Perl_croak(aTHX_ "Usage: Mob::FindGroundZ(THIS, new_x, new_y, z_offset= 0.0)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		float		new_x = (float)SvNV(ST(1));
		float		new_y = (float)SvNV(ST(2));
		float		z_offset;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 4)
			z_offset = 0.0;
		else {
			z_offset = (float)SvNV(ST(3));
		}

		RETVAL = THIS->FindGroundZ(new_x, new_y, z_offset);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_FindGroundZWithZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_FindGroundZWithZ)
{
	dXSARGS;
	if (items < 4 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::FindGroundZWithZ(THIS, new_x, new_y, new_z, z_offset= 0.0)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		float		new_x = (float)SvNV(ST(1));
		float		new_y = (float)SvNV(ST(2));
		float		new_z = (float)SvNV(ST(3));
		float		z_offset;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 5)
			z_offset = 0.0;
		else {
			z_offset = (float)SvNV(ST(4));
		}

		RETVAL = THIS->FindGroundZWithZ(new_x, new_y, new_z, z_offset);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_CalcMaxHP); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CalcMaxHP)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CalcMaxHP(THIS)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CalcMaxHP();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_HasOwner); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_HasOwner)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::HasOwner(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->HasOwner();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_Dist); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Dist)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::Dist(THIS, other)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->Dist(other);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_DistNoZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DistNoZ)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::DistNoZ(THIS, other)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->DistNoZ(other);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_DistNoRoot); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DistNoRoot)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::DistNoRoot(THIS, other)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->DistNoRoot(other);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_DistNoRootNoZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DistNoRootNoZ)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::DistNoRootNoZ(THIS, other)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		Mob*		other;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->DistNoRootNoZ(other);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_DistanceToLocation); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_DistanceToLocation)
{
	dXSARGS;
	if (items != 4)
		Perl_croak(aTHX_ "Usage: Mob::DistanceToLocation(THIS, x, y, z)");
	{
		Mob *		THIS;
		float		RETVAL;
		dXSTARG;
		float		x = (float)SvNV(ST(1));
		float		y = (float)SvNV(ST(2));
		float		z = (float)SvNV(ST(3));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->DistanceToLocation(x, y, z);
		XSprePUSH; PUSHn((double)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_SendIllusionPacket); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SendIllusionPacket)
{
	dXSARGS;
	if (items < 2 || items > 5)
		Perl_croak(aTHX_ "Usage: Mob::SendIllusionPacket(THIS, in_race, in_gender= 0xFF, in_texture= 0xFFFF, in_helmtexture= 0xFFFF)");
	{
		Mob *		THIS;
		int16		in_race = (int16)SvUV(ST(1));
		int16		in_gender;
		int16		in_texture;
		int16		in_helmtexture;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (items < 3)
			in_gender = 0xFF;
		else {
			in_gender = (int16)SvUV(ST(2));
		}

		if (items < 4)
			in_texture = 0xFFFF;
		else {
			in_texture = (int16)SvUV(ST(3));
		}

		if (items < 5)
			in_helmtexture = 0xFFFF;
		else {
			in_helmtexture = (int16)SvUV(ST(4));
		}

		THIS->SendIllusionPacket(in_race, in_gender, in_texture, in_helmtexture);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_faceDestination); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_faceDestination)
{
	dXSARGS;
	if (items != 3)
		Perl_croak(aTHX_ "Usage: Mob::faceDestination(THIS, x, y)");
	{
		Mob *		THIS;
		float		x = (float)SvNV(ST(1));
		float		y = (float)SvNV(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->faceDestination(x, y);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_CalculateNewFearpoint); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CalculateNewFearpoint)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CalculateNewFearpoint(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->CalculateNewFearpoint();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_CalcMaxMana); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CalcMaxMana)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CalcMaxMana(THIS)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CalcMaxMana();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_SetX); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetX)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetX(THIS, x)");
	{
		Mob *		THIS;
		float		x = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetX(x);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetY); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetY)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetY(THIS, y)");
	{
		Mob *		THIS;
		float		y = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetY(y);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetZ)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetZ(THIS, z)");
	{
		Mob *		THIS;
		float		z = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetZ(z);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetDeltaX); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetDeltaX)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetDeltaX(THIS, dx)");
	{
		Mob *		THIS;
		sint16		dx = (sint16)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetDeltaX(dx);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetDeltaY); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetDeltaY)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetDeltaY(THIS, dy)");
	{
		Mob *		THIS;
		sint16		dy = (sint16)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetDeltaY(dy);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetDeltaZ); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetDeltaZ)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetDeltaZ(THIS, dz)");
	{
		Mob *		THIS;
		sint16		dz = (sint16)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetDeltaZ(dz);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetHeading); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetHeading)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetHeading(THIS, h)");
	{
		Mob *		THIS;
		int8		h = (int8)SvUV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetHeading(h);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetVelocity); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetVelocity)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetVelocity(THIS, a)");
	{
		Mob *		THIS;
		sint8		a = (sint8)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetVelocity(a);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_AvoidDamage); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_AvoidDamage)
{
	dXSARGS;
	if (items != 4)
		Perl_croak(aTHX_ "Usage: Mob::AvoidDamage(THIS, other, damage, riposte)");
	{
		Mob *		THIS;
		sint32		RETVAL;
		dXSTARG;
		Mob*		other;
		sint32		damage = (sint32)SvIV(ST(2));
		bool		riposte = (bool)SvTRUE(ST(3));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		if (sv_derived_from(ST(1), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(1)));
			other = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "other is not of type Mob");
		if(other == NULL)
			Perl_croak(aTHX_ "other is NULL, avoiding crash.");

		RETVAL = THIS->AvoidDamage(other, damage, riposte);
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_CanThisClassDodge); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CanThisClassDodge)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CanThisClassDodge(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CanThisClassDodge();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CanThisClassParry); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CanThisClassParry)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CanThisClassParry(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CanThisClassParry();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CanThisClassBlock); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CanThisClassBlock)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CanThisClassBlock(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CanThisClassBlock();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CanThisClassRiposte); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CanThisClassRiposte)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CanThisClassRiposte(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CanThisClassRiposte();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CanNotSeeTarget); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CanNotSeeTarget)
{
	dXSARGS;
	if (items != 3)
		Perl_croak(aTHX_ "Usage: Mob::CanNotSeeTarget(THIS, mobx, moby)");
	{
		Mob *		THIS;
		bool		RETVAL;
		float		mobx = (float)SvNV(ST(1));
		float		moby = (float)SvNV(ST(2));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CanNotSeeTarget(mobx, moby);
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_CalculateACBonuses); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CalculateACBonuses)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CalculateACBonuses(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->CalculateACBonuses();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_acmod); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_acmod)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::acmod(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->acmod();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_monkacmod); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_monkacmod)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::monkacmod(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->monkacmod();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_iksaracmod); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_iksaracmod)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::iksaracmod(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->iksaracmod();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_rogueacmod); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_rogueacmod)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::rogueacmod(THIS)");
	{
		Mob *		THIS;
		sint16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->rogueacmod();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetMitigationAC); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetMitigationAC)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetMitigationAC(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetMitigationAC();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_GetAvoidanceAC); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetAvoidanceAC)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetAvoidanceAC(THIS)");
	{
		Mob *		THIS;
		int16		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetAvoidanceAC();
		XSprePUSH; PUSHu((UV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_IsInvulnerable); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_IsInvulnerable)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::IsInvulnerable(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->IsInvulnerable();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_SetInvulnerable); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetInvulnerable)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetInvulnerable(THIS, in)");
	{
		Mob *		THIS;
		bool		in = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetInvulnerable(in);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_GetInvisibleUndead); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetInvisibleUndead)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetInvisibleUndead(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetInvisibleUndead();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetInvisibleAnimal); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetInvisibleAnimal)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetInvisibleAnimal(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetInvisibleAnimal();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetSpellInvis); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetSpellInvis)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetSpellInvis(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetSpellInvis();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetInvisible); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetInvisible)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetInvisible(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetInvisible();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCanSeeThroughInvis); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCanSeeThroughInvis)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCanSeeThroughInvis(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCanSeeThroughInvis();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetCanSeeThroughInvisToUndead); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetCanSeeThroughInvisToUndead)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetCanSeeThroughInvisToUndead(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetCanSeeThroughInvisToUndead();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_SetCanSeeThroughInvis); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetCanSeeThroughInvis)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetCanSeeThroughInvis(THIS, in)");
	{
		Mob *		THIS;
		bool		in = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetCanSeeThroughInvis(in);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetCanSeeThroughInvisToUndead); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetCanSeeThroughInvisToUndead)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetCanSeeThroughInvisToUndead(THIS, in)");
	{
		Mob *		THIS;
		bool		in = (bool)SvTRUE(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetCanSeeThroughInvisToUndead(in);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_CancelAllInvisibility); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_CancelAllInvisibility)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::CancelAllInvisibility(THIS)");
	{
		Mob *		THIS;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->CancelAllInvisibility();
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Say); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Say)
{
	dXSARGS;
	if (items < 2)
		Perl_croak(aTHX_ "Usage: Mob::Say(THIS, format, ...)");
	{
		Mob *		THIS;
		char *		format = (char *)SvPV_nolen(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Say(format);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Shout); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Shout)
{
	dXSARGS;
	if (items < 2)
		Perl_croak(aTHX_ "Usage: Mob::Shout(THIS, format, ...)");
	{
		Mob *		THIS;
		char *		format = (char *)SvPV_nolen(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Shout(format);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_Emote); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_Emote)
{
	dXSARGS;
	if (items < 2)
		Perl_croak(aTHX_ "Usage: Mob::Emote(THIS, format, ...)");
	{
		Mob *		THIS;
		char *		format = (char *)SvPV_nolen(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->Emote(format);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_GetQglobal); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetQglobal)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetQglobal(THIS)");
	{
		Mob *		THIS;
		bool		RETVAL;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetQglobal();
		ST(0) = boolSV(RETVAL);
		sv_2mortal(ST(0));
	}
	XSRETURN(1);
}


XS(XS_Mob_GetNextHPEvent); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetNextHPEvent)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetNextHPEvent(THIS)");
	{
		Mob *		THIS;
		int		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetNextHPEvent();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_SetNextHPEvent); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetNextHPEvent)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetNextHPEvent(THIS, hpevent)");
	{
		Mob *		THIS;
		int		hpevent = (int)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetNextHPEvent(hpevent);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_GetNextIncHPEvent); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_GetNextIncHPEvent)
{
	dXSARGS;
	if (items != 1)
		Perl_croak(aTHX_ "Usage: Mob::GetNextIncHPEvent(THIS)");
	{
		Mob *		THIS;
		int		RETVAL;
		dXSTARG;

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		RETVAL = THIS->GetNextIncHPEvent();
		XSprePUSH; PUSHi((IV)RETVAL);
	}
	XSRETURN(1);
}


XS(XS_Mob_SetNextIncHPEvent); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetNextIncHPEvent)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetNextIncHPEvent(THIS, inchpevent)");
	{
		Mob *		THIS;
		int		inchpevent = (int)SvIV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetNextIncHPEvent(inchpevent);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetCastingSpellLocationX); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetCastingSpellLocationX)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetCastingSpellLocationX(THIS, x)");
	{
		Mob *		THIS;
		float		x = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetCastingSpellLocationX(x);
	}
	XSRETURN_EMPTY;
}


XS(XS_Mob_SetCastingSpellLocationY); /* prototype to pass -Wmissing-prototypes */
XS(XS_Mob_SetCastingSpellLocationY)
{
	dXSARGS;
	if (items != 2)
		Perl_croak(aTHX_ "Usage: Mob::SetCastingSpellLocationY(THIS, y)");
	{
		Mob *		THIS;
		float		y = (float)SvNV(ST(1));

		if (sv_derived_from(ST(0), "Mob")) {
			IV tmp = SvIV((SV*)SvRV(ST(0)));
			THIS = INT2PTR(Mob *,tmp);
		}
		else
			Perl_croak(aTHX_ "THIS is not of type Mob");
		if(THIS == NULL)
			Perl_croak(aTHX_ "THIS is NULL, avoiding crash.");

		THIS->SetCastingSpellLocationY(y);
	}
	XSRETURN_EMPTY;
}

#ifdef __cplusplus
extern "C"
#endif
XS(boot_Mob); /* prototype to pass -Wmissing-prototypes */
XS(boot_Mob)
{
	dXSARGS;
	char file[256];
	strncpy(file, __FILE__, 256);
	file[255] = 0;
	
	if(items != 1)
		fprintf(stderr, "boot_quest does not take any arguments.");
	char buf[128];

	//add the strcpy stuff to get rid of const warnings....



	XS_VERSION_BOOTCHECK ;

		newXSproto(strcpy(buf, "IsMob"), XS_Mob_IsMob, file, "$");
		newXSproto(strcpy(buf, "VisibleToMob"), XS_Mob_VisibleToMob, file, "$;$");
		newXSproto(strcpy(buf, "IsFullHP"), XS_Mob_IsFullHP, file, "$");
		newXSproto(strcpy(buf, "IsSnared"), XS_Mob_IsSnared, file, "$");
		newXSproto(strcpy(buf, "IsRooted"), XS_Mob_IsRooted, file, "$");
		newXSproto(strcpy(buf, "IsAlive"), XS_Mob_IsAlive, file, "$");
		newXSproto(strcpy(buf, "GetSkill"), XS_Mob_GetSkill, file, "$$");
		newXSproto(strcpy(buf, "GetEquipment"), XS_Mob_GetEquipment, file, "$$");
		newXSproto(strcpy(buf, "GetRace"), XS_Mob_GetRace, file, "$");
		newXSproto(strcpy(buf, "GetGender"), XS_Mob_GetGender, file, "$");
		newXSproto(strcpy(buf, "GetBaseRace"), XS_Mob_GetBaseRace, file, "$");
		newXSproto(strcpy(buf, "GetBaseGender"), XS_Mob_GetBaseGender, file, "$");
		newXSproto(strcpy(buf, "GetDeity"), XS_Mob_GetDeity, file, "$");
		newXSproto(strcpy(buf, "GetTexture"), XS_Mob_GetTexture, file, "$");
		newXSproto(strcpy(buf, "GetHelmTexture"), XS_Mob_GetHelmTexture, file, "$");
		newXSproto(strcpy(buf, "GetClass"), XS_Mob_GetClass, file, "$");
		newXSproto(strcpy(buf, "GetLevel"), XS_Mob_GetLevel, file, "$");
		newXSproto(strcpy(buf, "GetName"), XS_Mob_GetName, file, "$");
		newXSproto(strcpy(buf, "GetTarget"), XS_Mob_GetTarget, file, "$");
		newXSproto(strcpy(buf, "GetHPRatio"), XS_Mob_GetHPRatio, file, "$");
		newXSproto(strcpy(buf, "GetHP"), XS_Mob_GetHP, file, "$");
		newXSproto(strcpy(buf, "GetMaxHP"), XS_Mob_GetMaxHP, file, "$");
		newXSproto(strcpy(buf, "GetMaxMana"), XS_Mob_GetMaxMana, file, "$");
		newXSproto(strcpy(buf, "GetMana"), XS_Mob_GetMana, file, "$");
		newXSproto(strcpy(buf, "GetATK"), XS_Mob_GetATK, file, "$");
		newXSproto(strcpy(buf, "GetSTR"), XS_Mob_GetSTR, file, "$");
		newXSproto(strcpy(buf, "GetSTA"), XS_Mob_GetSTA, file, "$");
		newXSproto(strcpy(buf, "GetDEX"), XS_Mob_GetDEX, file, "$");
		newXSproto(strcpy(buf, "GetAGI"), XS_Mob_GetAGI, file, "$");
		newXSproto(strcpy(buf, "GetINT"), XS_Mob_GetINT, file, "$");
		newXSproto(strcpy(buf, "GetWIS"), XS_Mob_GetWIS, file, "$");
		newXSproto(strcpy(buf, "GetCHA"), XS_Mob_GetCHA, file, "$");
		newXSproto(strcpy(buf, "GetMR"), XS_Mob_GetMR, file, "$");
		newXSproto(strcpy(buf, "GetCR"), XS_Mob_GetCR, file, "$");
		newXSproto(strcpy(buf, "GetFR"), XS_Mob_GetFR, file, "$");
		newXSproto(strcpy(buf, "GetDR"), XS_Mob_GetDR, file, "$");
		newXSproto(strcpy(buf, "GetPR"), XS_Mob_GetPR, file, "$");
		newXSproto(strcpy(buf, "GetX"), XS_Mob_GetX, file, "$");
		newXSproto(strcpy(buf, "GetY"), XS_Mob_GetY, file, "$");
		newXSproto(strcpy(buf, "GetZ"), XS_Mob_GetZ, file, "$");
		newXSproto(strcpy(buf, "GetHeading"), XS_Mob_GetHeading, file, "$");
		newXSproto(strcpy(buf, "GetSize"), XS_Mob_GetSize, file, "$");
		newXSproto(strcpy(buf, "GetLastChange"), XS_Mob_GetLastChange, file, "$");
		newXSproto(strcpy(buf, "GetAppearance"), XS_Mob_GetAppearance, file, "$");
		newXSproto(strcpy(buf, "GetPet"), XS_Mob_GetPet, file, "$");
		newXSproto(strcpy(buf, "GetPetID"), XS_Mob_GetPetID, file, "$");
		newXSproto(strcpy(buf, "GetOwnerOrSelf"), XS_Mob_GetOwnerOrSelf, file, "$");
		newXSproto(strcpy(buf, "GetOwner"), XS_Mob_GetOwner, file, "$");
		newXSproto(strcpy(buf, "GetOwnerID"), XS_Mob_GetOwnerID, file, "$");
		newXSproto(strcpy(buf, "GetPetType"), XS_Mob_GetPetType, file, "$");
		newXSproto(strcpy(buf, "GetSpecialFactionCon"), XS_Mob_GetSpecialFactionCon, file, "$$");
		newXSproto(strcpy(buf, "GetHitBox"), XS_Mob_GetHitBox, file, "$");
		newXSproto(strcpy(buf, "GetGuardX"), XS_Mob_GetGuardX, file, "$");
		newXSproto(strcpy(buf, "GetGuardY"), XS_Mob_GetGuardY, file, "$");
		newXSproto(strcpy(buf, "GetGuardZ"), XS_Mob_GetGuardZ, file, "$");
		newXSproto(strcpy(buf, "IsBard"), XS_Mob_IsBard, file, "$");
		newXSproto(strcpy(buf, "IsMesmerized"), XS_Mob_IsMesmerized, file, "$");
		newXSproto(strcpy(buf, "GetCastingSpellTargetID"), XS_Mob_GetCastingSpellTargetID, file, "$");
		newXSproto(strcpy(buf, "GetCastingSpellSlot"), XS_Mob_GetCastingSpellSlot, file, "$");
		newXSproto(strcpy(buf, "GetCastingSpellInventorySlot"), XS_Mob_GetCastingSpellInventorySlot, file, "$");
		newXSproto(strcpy(buf, "GetCurfp"), XS_Mob_GetCurfp, file, "$");
		newXSproto(strcpy(buf, "GetSeeInvisible"), XS_Mob_GetSeeInvisible, file, "$");
		newXSproto(strcpy(buf, "GetSeeInvisibleUndead"), XS_Mob_GetSeeInvisibleUndead, file, "$");
		newXSproto(strcpy(buf, "GetRunSpeed"), XS_Mob_GetRunSpeed, file, "$");
		newXSproto(strcpy(buf, "GetWalkSpeed"), XS_Mob_GetWalkSpeed, file, "$");
		newXSproto(strcpy(buf, "GetNPCTypeID"), XS_Mob_GetNPCTypeID, file, "$");
		newXSproto(strcpy(buf, "GetDamageShield"), XS_Mob_GetDamageShield, file, "$");
		newXSproto(strcpy(buf, "GetReverseDamageShield"), XS_Mob_GetReverseDamageShield, file, "$");
		newXSproto(strcpy(buf, "GetDamageShieldType"), XS_Mob_GetDamageShieldType, file, "$");
		newXSproto(strcpy(buf, "GetAnimation"), XS_Mob_GetAnimation, file, "$");
		newXSproto(strcpy(buf, "GetLevelRegen"), XS_Mob_GetLevelRegen, file, "$");
		newXSproto(strcpy(buf, "GetHitChance"), XS_Mob_GetHitChance, file, "$$$$");
		newXSproto(strcpy(buf, "GetItemHaste"), XS_Mob_GetItemHaste, file, "$");
		newXSproto(strcpy(buf, "GetKickDamage"), XS_Mob_GetKickDamage, file, "$");
		newXSproto(strcpy(buf, "GetBashDamage"), XS_Mob_GetBashDamage, file, "$");
		newXSproto(strcpy(buf, "GetMeleeReach"), XS_Mob_GetMeleeReach, file, "$");
		newXSproto(strcpy(buf, "GetBaseSize"), XS_Mob_GetBaseSize, file, "$");
		newXSproto(strcpy(buf, "GetDefaultSize"), XS_Mob_GetDefaultSize, file, "$");
		newXSproto(strcpy(buf, "setBoatSpeed"), XS_Mob_setBoatSpeed, file, "$$");
		newXSproto(strcpy(buf, "SetOwnerID"), XS_Mob_SetOwnerID, file, "$$;$");
		newXSproto(strcpy(buf, "SetPet"), XS_Mob_SetPet, file, "$$");
		newXSproto(strcpy(buf, "SetPetID"), XS_Mob_SetPetID, file, "$$");
		newXSproto(strcpy(buf, "SetTarget"), XS_Mob_SetTarget, file, "$$");
		newXSproto(strcpy(buf, "SetCurfp"), XS_Mob_SetCurfp, file, "$$");
		newXSproto(strcpy(buf, "DoManaRegen"), XS_Mob_DoManaRegen, file, "$");
		newXSproto(strcpy(buf, "DoEnduRegen"), XS_Mob_DoEnduRegen, file, "$");
		newXSproto(strcpy(buf, "SetInvisible"), XS_Mob_SetInvisible, file, "$$");
		newXSproto(strcpy(buf, "SetInvisibleUndead"), XS_Mob_SetInvisibleUndead, file, "$$");
		newXSproto(strcpy(buf, "SetInvisibleAnimal"), XS_Mob_SetInvisibleAnimal, file, "$$");
		newXSproto(strcpy(buf, "SetHP"), XS_Mob_SetHP, file, "$$");
		newXSproto(strcpy(buf, "SetLevel"), XS_Mob_SetLevel, file, "$$");
		newXSproto(strcpy(buf, "SetMana"), XS_Mob_SetMana, file, "$$");
		newXSproto(strcpy(buf, "SetSkill"), XS_Mob_SetSkill, file, "$$$");
		newXSproto(strcpy(buf, "GoToBind"), XS_Mob_GoToBind, file, "$");
		newXSproto(strcpy(buf, "Attack"), XS_Mob_Attack, file, "$$;$$$");
		newXSproto(strcpy(buf, "Damage"), XS_Mob_Damage, file, "$$$$;$");
		newXSproto(strcpy(buf, "Heal"), XS_Mob_Heal, file, "$");
		newXSproto(strcpy(buf, "Death"), XS_Mob_Death, file, "$$$;$$");
		newXSproto(strcpy(buf, "GMMove"), XS_Mob_GMMove, file, "$$$$;$");
		newXSproto(strcpy(buf, "Message"), XS_Mob_Message, file, "$$$;@");
		newXSproto(strcpy(buf, "TicProcess"), XS_Mob_TicProcess, file, "$");
		newXSproto(strcpy(buf, "ChangeHP"), XS_Mob_ChangeHP, file, "$$$;$");
		newXSproto(strcpy(buf, "MonkSpecialAttack"), XS_Mob_MonkSpecialAttack, file, "$$$");
		newXSproto(strcpy(buf, "DoAnim"), XS_Mob_DoAnim, file, "$$");
		newXSproto(strcpy(buf, "ChangeSize"), XS_Mob_ChangeSize, file, "$$");
		newXSproto(strcpy(buf, "SendPosUpdate"), XS_Mob_SendPosUpdate, file, "$;$$$");
		newXSproto(strcpy(buf, "SendBeginCastPacket"), XS_Mob_SendBeginCastPacket, file, "$$$");
		newXSproto(strcpy(buf, "DamageShield"), XS_Mob_DamageShield, file, "$$");
		newXSproto(strcpy(buf, "SpellProcess"), XS_Mob_SpellProcess, file, "$");
		newXSproto(strcpy(buf, "InterruptSpell"), XS_Mob_InterruptSpell, file, "$;$$");
		newXSproto(strcpy(buf, "BuffFadeBySlot"), XS_Mob_BuffFadeBySlot, file, "$$$");
		newXSproto(strcpy(buf, "BuffFadeAll"), XS_Mob_BuffFadeAll, file, "$");
		newXSproto(strcpy(buf, "Kill"), XS_Mob_Kill, file, "$");
		newXSproto(strcpy(buf, "SaveGuardSpot"), XS_Mob_SaveGuardSpot, file, "$");
		newXSproto(strcpy(buf, "StopSong"), XS_Mob_StopSong, file, "$");
		newXSproto(strcpy(buf, "DoBardSongAnim"), XS_Mob_DoBardSongAnim, file, "$$");
		newXSproto(strcpy(buf, "EnableSpellBar"), XS_Mob_EnableSpellBar, file, "$;$");
		newXSproto(strcpy(buf, "Mesmerize"), XS_Mob_Mesmerize, file, "$");
		newXSproto(strcpy(buf, "CalcBonuses"), XS_Mob_CalcBonuses, file, "$;$$");
		newXSproto(strcpy(buf, "DoHPRegen"), XS_Mob_DoHPRegen, file, "$;$");
		newXSproto(strcpy(buf, "SendHPUpdate"), XS_Mob_SendHPUpdate, file, "$");
		newXSproto(strcpy(buf, "DoSpecialAttackDamage"), XS_Mob_DoSpecialAttackDamage, file, "$$$$;$");
		newXSproto(strcpy(buf, "CheckPet"), XS_Mob_CheckPet, file, "$");
		newXSproto(strcpy(buf, "CheckAggro"), XS_Mob_CheckAggro, file, "$$");
		newXSproto(strcpy(buf, "CheckLosFN"), XS_Mob_CheckLosFN, file, "$$");
		newXSproto(strcpy(buf, "CheckMaxSkill"), XS_Mob_CheckMaxSkill, file, "$$$$$;$");
		newXSproto(strcpy(buf, "MakePet"), XS_Mob_MakePet, file, "$$$$;$$$$$$$");
		newXSproto(strcpy(buf, "MakeEyeOfZomm"), XS_Mob_MakeEyeOfZomm, file, "$$");
		newXSproto(strcpy(buf, "ShowStats"), XS_Mob_ShowStats, file, "$$");
		newXSproto(strcpy(buf, "ShowBuffs"), XS_Mob_ShowBuffs, file, "$$");
		newXSproto(strcpy(buf, "FindSpell"), XS_Mob_FindSpell, file, "$$$$;$");
		newXSproto(strcpy(buf, "FindType"), XS_Mob_FindType, file, "$$");
		newXSproto(strcpy(buf, "FindGroundZ"), XS_Mob_FindGroundZ, file, "$$$;$");
		newXSproto(strcpy(buf, "FindGroundZWithZ"), XS_Mob_FindGroundZWithZ, file, "$$$$;$");
		newXSproto(strcpy(buf, "CalcMaxHP"), XS_Mob_CalcMaxHP, file, "$");
		newXSproto(strcpy(buf, "HasOwner"), XS_Mob_HasOwner, file, "$");
		newXSproto(strcpy(buf, "Dist"), XS_Mob_Dist, file, "$$");
		newXSproto(strcpy(buf, "DistNoZ"), XS_Mob_DistNoZ, file, "$$");
		newXSproto(strcpy(buf, "DistNoRoot"), XS_Mob_DistNoRoot, file, "$$");
		newXSproto(strcpy(buf, "DistNoRootNoZ"), XS_Mob_DistNoRootNoZ, file, "$$");
		newXSproto(strcpy(buf, "DistanceToLocation"), XS_Mob_DistanceToLocation, file, "$$$$");
		newXSproto(strcpy(buf, "SendIllusionPacket"), XS_Mob_SendIllusionPacket, file, "$$;$$$");
		newXSproto(strcpy(buf, "faceDestination"), XS_Mob_faceDestination, file, "$$$");
		newXSproto(strcpy(buf, "CalculateNewFearpoint"), XS_Mob_CalculateNewFearpoint, file, "$");
		newXSproto(strcpy(buf, "CalcMaxMana"), XS_Mob_CalcMaxMana, file, "$");
		newXSproto(strcpy(buf, "SetX"), XS_Mob_SetX, file, "$$");
		newXSproto(strcpy(buf, "SetY"), XS_Mob_SetY, file, "$$");
		newXSproto(strcpy(buf, "SetZ"), XS_Mob_SetZ, file, "$$");
		newXSproto(strcpy(buf, "SetDeltaX"), XS_Mob_SetDeltaX, file, "$$");
		newXSproto(strcpy(buf, "SetDeltaY"), XS_Mob_SetDeltaY, file, "$$");
		newXSproto(strcpy(buf, "SetDeltaZ"), XS_Mob_SetDeltaZ, file, "$$");
		newXSproto(strcpy(buf, "SetHeading"), XS_Mob_SetHeading, file, "$$");
		newXSproto(strcpy(buf, "SetVelocity"), XS_Mob_SetVelocity, file, "$$");
		newXSproto(strcpy(buf, "AvoidDamage"), XS_Mob_AvoidDamage, file, "$$$$");
		newXSproto(strcpy(buf, "CanThisClassDodge"), XS_Mob_CanThisClassDodge, file, "$");
		newXSproto(strcpy(buf, "CanThisClassParry"), XS_Mob_CanThisClassParry, file, "$");
		newXSproto(strcpy(buf, "CanThisClassBlock"), XS_Mob_CanThisClassBlock, file, "$");
		newXSproto(strcpy(buf, "CanThisClassRiposte"), XS_Mob_CanThisClassRiposte, file, "$");
		newXSproto(strcpy(buf, "CanNotSeeTarget"), XS_Mob_CanNotSeeTarget, file, "$$$");
		newXSproto(strcpy(buf, "CalculateACBonuses"), XS_Mob_CalculateACBonuses, file, "$");
		newXSproto(strcpy(buf, "acmod"), XS_Mob_acmod, file, "$");
		newXSproto(strcpy(buf, "monkacmod"), XS_Mob_monkacmod, file, "$");
		newXSproto(strcpy(buf, "iksaracmod"), XS_Mob_iksaracmod, file, "$");
		newXSproto(strcpy(buf, "rogueacmod"), XS_Mob_rogueacmod, file, "$");
		newXSproto(strcpy(buf, "GetMitigationAC"), XS_Mob_GetMitigationAC, file, "$");
		newXSproto(strcpy(buf, "GetAvoidanceAC"), XS_Mob_GetAvoidanceAC, file, "$");
		newXSproto(strcpy(buf, "IsInvulnerable"), XS_Mob_IsInvulnerable, file, "$");
		newXSproto(strcpy(buf, "SetInvulnerable"), XS_Mob_SetInvulnerable, file, "$$");
		newXSproto(strcpy(buf, "GetInvisibleUndead"), XS_Mob_GetInvisibleUndead, file, "$");
		newXSproto(strcpy(buf, "GetInvisibleAnimal"), XS_Mob_GetInvisibleAnimal, file, "$");
		newXSproto(strcpy(buf, "GetSpellInvis"), XS_Mob_GetSpellInvis, file, "$");
		newXSproto(strcpy(buf, "GetInvisible"), XS_Mob_GetInvisible, file, "$");
		newXSproto(strcpy(buf, "GetCanSeeThroughInvis"), XS_Mob_GetCanSeeThroughInvis, file, "$");
		newXSproto(strcpy(buf, "GetCanSeeThroughInvisToUndead"), XS_Mob_GetCanSeeThroughInvisToUndead, file, "$");
		newXSproto(strcpy(buf, "SetCanSeeThroughInvis"), XS_Mob_SetCanSeeThroughInvis, file, "$$");
		newXSproto(strcpy(buf, "SetCanSeeThroughInvisToUndead"), XS_Mob_SetCanSeeThroughInvisToUndead, file, "$$");
		newXSproto(strcpy(buf, "CancelAllInvisibility"), XS_Mob_CancelAllInvisibility, file, "$");
		newXSproto(strcpy(buf, "Say"), XS_Mob_Say, file, "$$;@");
		newXSproto(strcpy(buf, "Shout"), XS_Mob_Shout, file, "$$;@");
		newXSproto(strcpy(buf, "Emote"), XS_Mob_Emote, file, "$$;@");
		newXSproto(strcpy(buf, "GetQglobal"), XS_Mob_GetQglobal, file, "$");
		newXSproto(strcpy(buf, "GetNextHPEvent"), XS_Mob_GetNextHPEvent, file, "$");
		newXSproto(strcpy(buf, "SetNextHPEvent"), XS_Mob_SetNextHPEvent, file, "$$");
		newXSproto(strcpy(buf, "GetNextIncHPEvent"), XS_Mob_GetNextIncHPEvent, file, "$");
		newXSproto(strcpy(buf, "SetNextIncHPEvent"), XS_Mob_SetNextIncHPEvent, file, "$$");
		newXSproto(strcpy(buf, "SetCastingSpellLocationX"), XS_Mob_SetCastingSpellLocationX, file, "$$");
		newXSproto(strcpy(buf, "SetCastingSpellLocationY"), XS_Mob_SetCastingSpellLocationY, file, "$$");
	XSRETURN_YES;
}

#endif //EMBPERL_XS_CLASSES

